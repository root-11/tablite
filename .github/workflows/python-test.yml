# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        # python-version: ["3.8", "3.9", "3.10"]
        os: [windows-latest]
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        arcitecture: x64
    - uses: jiro4989/setup-nim-action@v1
      with:
        nim-version: "2.0.0"
    - name: Nimble Install dependencies
      run: |
        nimble -y refresh
        nimble -y install nimpy argparse
    - name: Set Environment Variables
      uses: allenevans/set-env@v2.0.0
      with:
        NIMLITE_DIR:  '_nimlite'
        NIM_PACKAGE_NAME: 'nimlite'
        TABLITE_PACKAGE_NAME: 'tablite'
        NIMC_FLAGS: '--app:lib --threads:on -d:release -d:danger'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        python -m pip install -r requirements.txt
    - name: Compile Debug & import (Unix)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        # compile the nimlite
        nim c ${{ env.NIMC_FLAGS }} --out:${{ env.NIMLITE_DIR }}/${{ env.NIM_PACKAGE_NAME }}.so  ${{ env.NIMLITE_DIR }}/${{ env.NIM_PACKAGE_NAME }}.nim
        # check if compiled successfully
        python -c "print(__import__('${{ env.TABLITE_PACKAGE_NAME }}.${{ env.NIM_PACKAGE_NAME }}').__file__)"
    - name: MSVC
      if: runner.os == 'Windows'
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64
    - name: Compile Debug & import (Windows)
      if: runner.os == 'Windows'
      run: |
        # compile the nimlite
        # nim c ${{ env.NIMC_FLAGS }} --tlsEmulation:off --passL:-static  --out:${{ env.NIMLITE_DIR }}/${{ env.NIM_PACKAGE_NAME }}.exe ${{ env.NIMLITE_DIR }}/${{ env.NIM_PACKAGE_NAME }}.nim
        nim c --threads:on -d:release -d:danger --out:${{ env.NIMLITE_DIR }}/${{ env.NIM_PACKAGE_NAME }}.exe ${{ env.NIMLITE_DIR }}/${{ env.NIM_PACKAGE_NAME }}.nim
        # nim c --app:lib -d:release -d:danger --tlsEmulation:off --passL:-static --out:nimtest.pyd ${{ env.NIMLITE_DIR }}/${{ env.NIM_PACKAGE_NAME }}.nim
        # dumpbin /headers nimtest.pyd
        # python -c "import platform, sys; print(platform.architecture(), sys.maxsize, sys.executable)"
        # python -c "print('nimtest:', __import__('nimtest').__file__)"
        # # where python
        # dumpbin /headers C:/hostedtoolcache/windows/Python/3.10.11/x64/python.exe
        # # # Windows build just doesn't work for whatever reason as it can't seem to import the nimlite.pyd file
        # # # check if compiled successfully
        # # python -c "print(__import__('${{ env.TABLITE_PACKAGE_NAME }}.${{ env.NIM_PACKAGE_NAME }}').__file__)"
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        python -m pytest tests
